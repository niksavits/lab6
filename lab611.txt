use rand::Rng;
use std::vec::Vec;

const M: usize = 5; // количество строк
const N: usize = 4; // количество столбцов

fn print_matrix(matrix: &Vec<Vec<i32>>) {
    for row in matrix {
        for &elem in row {
            print!("{}\t", elem);
        }
        println!();
    }
}

fn main() {
    let mut rng = rand::thread_rng();

    let mut matrix: Vec<Vec<i32>> = vec![vec![0; N]; M];

    // заполнение матрицы случайными числами от -10 до 40
    for i in 0..M {
        for j in 0..N {
            matrix[i][j] = rng.gen_range(-10..=40);
        }
    }

    println!("Исходная матрица:");
    print_matrix(&matrix);

    let mut selected_rows: Vec<Vec<i32>> = Vec::new(); // вектор для хранения строк с тремя и более отрицательными элементами

    for row in &matrix {
        let neg_count = row.iter().filter(|&&elem| elem < 0).count();
        if neg_count >= 3 {
            selected_rows.push(row.clone());
        }
    }

    println!("Номера строк, содержащих хотя бы три отрицательных элемента:");
    for (i, row) in matrix.iter().enumerate() {
        let neg_count = row.iter().filter(|&&elem| elem < 0).count();
        if neg_count >= 3 {
            print!("{} ", i + 1); // выводим номер строки
        }
    }
    println!();

    let mut negative_elements: Vec<i32> = Vec::new(); // вектор для хранения всех отрицательных элементов
    for row in &selected_rows {
        for &elem in row {
            if elem < 0 {
                negative_elements.push(elem);
            }
        }
    }

    println!("Отрицательные элементы из выбранных строк:");
    for elem in negative_elements {
        print!("{} ", elem);
    }
    println!();
}
