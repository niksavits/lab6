#include<iomanip>
#include <iostream>
#include <vector>
#include <random>
#include <Windows.h>

using namespace std;

const float E = 0.001; // Определение константы E для сравнения точности
const int n = 4; // Определение константы n для размера матрицы и векторов

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
	setlocale(LC_ALL, "Russian");

	// Определение матрицы A размером n x n
	float A[n][n] = {
		1.09, -0.04, 0.21, -18.00,
		0.25, -1.23, -0.16, -0.09,
		-0.21, -0.16, 0.8, -0.13,
		0.15, -1.31, 0.06, 0.84
	};
	float L[n][n], U[n][n]; // Объявление матриц L и U для LU-разложения
	float B[n] = { -1.24,  0.84, 2.56, 1.09 }; // Объявление вектора свободных членов B
	float sum = 0; // Инициализация переменной sum для накопления суммы

	// LU-разложение матрицы A
	for (int i = 0; i < n; i++) { // Цикл по строкам
		for (int j = 0; j < n; j++) { // Цикл по столбцам
			if (i <= j) { // Заполнение верхней треугольной матрицы U
				L[i][j] = 0; // Элементы выше главной диагонали в L равны 0
				if (i == j) {
					L[i][j] = 1; // Элементы на главной диагонали в L равны 1
				}
				for (int k = 0; k < i; k++) { // Накопление суммы произведений
					sum += (L[i][k] * U[k][j]);
				}
				U[i][j] = (A[i][j] - sum); // Вычисление элемента матрицы U
			}
			else if (i > j) { // Заполнение нижней треугольной матрицы L
				U[i][j] = 0; // Элементы ниже главной диагонали в U равны 0
				for (int k = 0; k < j; k++) { // Накопление суммы произведений
					sum += L[i][k] * U[k][j];
				}
				L[i][j] = (A[i][j] - sum) / U[j][j]; // Вычисление элемента матрицы L
			}
			sum = 0; // Обнуление суммы
		}
	}

	// Вывод матрицы L
	cout << " L: " << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << fixed << setprecision(3) << L[i][j] << "  ";
		}
		cout << endl;
	}

	// Вывод матрицы U
	cout << endl << " U: " << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << fixed << setprecision(3) << U[i][j] << "  ";
		}
		cout << endl;
	}

	// Решение системы уравнений методом LU-разложения
	float x[n], y[n]; // Объявление векторов x и y для промежуточных вычислений
	for (int k = 0; k < n; k++) { // Прямой ход
		for (int j = 0; j < k; j++) {
			sum += L[k][j] * y[j]; // Накопление суммы произведений
		}
		y[k] = B[k] - sum; // Вычисление элемента вектора y
		sum = 0; // Обнуление суммы
	}
	for (int k = n - 1; k >= 0; k--) { // Обратный ход
		for (int j = k + 1; j < n; j++) {
			sum += U[k][j] * x[j]; // Накопление суммы произведений
		}
		x[k] = (y[k] - sum) / U[k][k]; // Вычисление элемента вектора x
		sum = 0; // Обнуление суммы
	}

	cout << endl;
	for (int k = 0; k < n; k++) {
		cout << " X" << k + 1 << " : " << fixed << setprecision(3) << x[k] << "	Y" << k + 1 << " : " << fixed << setprecision(3) << y[k] << endl;
	}
	cout << endl;

	// Метод простой итерации
	float xIter[n], C[n][n], f[n]; // Объявление векторов xIter и f и матрицы C
	int iter = 0;
	// Инициализация начальных значений вектора xIter
	for (int k = 0; k < n; k++) {
		xIter[k] = 0; // Начальные значения равны 0
	}
	float xTime[n]; // Вектор для временного хранения значений xIter

	cout << setw(10) << " N	" << setw(20) << " x1 " << setw(12) << " x2 " << setw(12) << " x3 " << setw(10) << " x4 " << setw(25) << " En " << endl;

	// Цикл итераций
	while (true) {
		for (int i = 0; i < n; i++) { // Цикл по строкам
			for (int j = 0; j < n; j++) { // Цикл по столбцам
				if (i == j) {
					C[i][j] = 0; // Элементы на главной диагонали в C равны 0
				}
				else {
					// Каноническому виду
					C[i][j] = -A[i][j] / A[i][i]; // Вычисление элементов матрицы C
					sum += C[i][j]; // Накопление суммы элементов C
				}
			}
			xTime[i] = xIter[i]; // Сохранение текущих значений xIter
			f[i] = B[i] / A[i][i]; // Вычисление элементов вектора f
			xIter[i] = f[i] + sum * xIter[i]; // Вычисление новых значений xIter
			sum = 0; // Обнуление суммы
		}

		// Проверка условия сходимости
		if (abs(xIter[0] - xTime[0]) < E) {
			cout << "Сходится " << endl;
			cout << endl;
			for (int k = 0; k < n; k++) {
				cout << " X" << k + 1 << " : " << fixed << setprecision(3) << xIter[k] << endl;
			}
			break;
		}
		if (iter > 16) { // Проверка на максимальное количество итераций
			cout << "Расходится. Причины: Диагональное преобладание: Матрица коэффициентов системы линейных уравнений должна быть диагонально доминирующей. Это означает, что модуль элемента на главной диагонали матрицы должен быть больше суммы модулей всех остальных элементов в соответствующей строке (или столбце)." << endl;
			cout << "Норма матрицы меньше 1: Норма матрицы, обратной к матрице коэффициентов системы, должна быть меньше 1. Это обеспечивает сходимость итерационного процесса." << endl;
			break;
		}
		iter++;

		cout << setw(10) << iter << setw(25) << xIter[0] << setw(15) << xIter[1] << setw(10) << xIter[2] << setw(10) << xIter[3] << setw(25) << xIter[0] - xTime[0] << endl;
	}
}
