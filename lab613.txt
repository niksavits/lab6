use std::{thread, time};
use rand::Rng;

const WIDTH: usize = 40;
const HEIGHT: usize = 40;

// функция для вывода текущего состояния клеточного автомата в консоль
fn print_grid(grid: &Vec<Vec<bool>>) {
    // Очищаем экран консоли
    print!("{esc}c", esc = 27 as char);
    for row in grid {
        for &cell in row {
            print!("{}", if cell { " 0 " } else { " . " });
        }
        println!();
    }
}

// функция для подсчёта количества соседей у клетки с координатами (x, y)
fn count_neighbors(grid: &Vec<Vec<bool>>, x: usize, y: usize) -> i32 {
    let mut count = 0;
    for i in -1..=1 {
        for j in -1..=1 {
            if i == 0 && j == 0 {
                continue;
            }
            let nx = (x as isize + i + WIDTH as isize) as usize % WIDTH;
            let ny = (y as isize + j + HEIGHT as isize) as usize % HEIGHT;
            if grid[ny][nx] {
                count += 1;
            }
        }
    }
    count
}

// функция для обновления состояния клеточного автомата на следующее поколение
fn update_grid(grid: &Vec<Vec<bool>>) -> Vec<Vec<bool>> {
    let mut new_grid = grid.clone();
    for y in 0..HEIGHT {
        for x in 0..WIDTH {
            let neighbors = count_neighbors(grid, x, y);
            // правила клеточного автомата
            if grid[y][x] {
                if neighbors < 2 || neighbors > 3 {
                    new_grid[y][x] = false;
                }
            } else {
                if neighbors == 3 {
                    new_grid[y][x] = true;
                }
            }
        }
    }
    new_grid
}

fn main() {
    // инициализация начального состояния поля
    let mut grid: Vec<Vec<bool>> = vec![vec![false; WIDTH]; HEIGHT];

    // ружье
    grid[5][5] = true;
    grid[6][6] = true;
    grid[7][4] = true;
    grid[7][5] = true;
    grid[7][6] = true;

    // анимация
    loop {
        print_grid(&grid);
        grid = update_grid(&grid);
        thread::sleep(time::Duration::from_millis(200));
    }
}
